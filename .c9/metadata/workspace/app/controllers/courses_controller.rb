{"changed":false,"filter":false,"title":"courses_controller.rb","tooltip":"/app/controllers/courses_controller.rb","value":"class CoursesController < ApplicationController\n  before_action :set_course, only: [:destroy, :edit, :update]\n  before_filter :authorize\n  \n  def index\n    @pages = (Hash[Course.all.group_by(&:subject).sort]).keys\n    if params[:subject].blank?\n      @courses = (Hash[Course.all.group_by(&:subject).sort]).first[1].sort_by { |el| el[:course] }\n    else\n     @courses = (Hash[Course.all.group_by(&:subject).sort])[params[:subject]].sort_by { |el| el[:course] }\n    end\n    @page = @pages.index(@courses[0].subject)\n    respond_to do |format|\n      format.js {}\n      format.html {}\n    end\n  end\n  \n  def new\n    @courses = Course.all.map { |course| [course.subject + course.course.to_s + \": \" + course.title, course.id] }\n    @course = Course.new\n  end\n\n  # GET /courses/1/edit\n  def edit\n    @prereqs = @course.prerequisites.group_by(&:course_group_id)\n    @max_group_id = @prereqs.keys.max\n    if @max_group_id == nil\n      @max_group_id = 1\n    end\n    @courses = Course.all.map { |course| [course.subject + course.course.to_s + \": \" + course.title, course.id] }\n  end\n\n  def create\n    groups = (course_params[:prerequisites]).join(\"_\").split(\"__\").map{ |group| group.split(\"_\").reject(&:empty?) }\n    temp_params = course_params\n    temp_params.delete(\"prerequisites\")\n    @course = Course.new(temp_params)\n    min_grade_i =0\n    prereq_min_grades = params[\"prereq_grades\"].split(\"/|/\")\n    prereq_min_grades.map! { |grade| (grade == \"N/A\") ? nil : grade }\n    \n    @prereqs = []\n    groups.each_with_index do |group, index|\n      group.each do |course_id|\n        @prereqs << Prerequisites.new(prerequisite_course_id: course_id, course_group_id: (index+1), minimum_grade: prereq_min_grades[min_grade_i])\n        min_grade_i += 1\n      end\n    end\n\n    respond_to do |format|\n      if @course.save\n        @course.prerequisites = @prereqs\n        flash[:notice] = @course.title + \" was successfully created!\"\n        format.js { render :js => \"window.location = '/courses'\" }\n        format.html { redirect_to users_path, notice: @course.title + ' created' }\n        format.json { render :show, status: :created, location: @course }\n      else\n        format.js { @errors = true}\n        format.html { render :new }\n        format.json { render json: @course.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def update\n    groups = (course_params[:prerequisites]).join(\"_\").split(\"__\").map{ |group| group.split(\"_\").reject(&:empty?) }\n    temp_params = course_params\n    temp_params.delete(\"prerequisites\")\n    \n    min_grade_i =0\n    prereq_min_grades = params[\"prereq_grades\"].split(\"/|/\")\n    prereq_min_grades.map! { |grade| (grade == \"N/A\") ? nil : grade }\n    \n    respond_to do |format|\n      if @course.update(temp_params)\n        @prereqs = []\n        groups.each_with_index do |group, index|\n          group.each do |course_id|\n            @prereqs << Prerequisites.new(prerequisite_course_id: course_id, course_group_id: (index+1), minimum_grade: prereq_min_grades[min_grade_i])\n            min_grade_i += 1\n          end\n        end\n        @course.prerequisites = @prereqs\n        flash[:notice] = @course.title + \" was successfully updated!\"\n        format.js { render :js => \"window.location = '/courses'\" }\n        format.html {redirect_to courses_path, notice: @course.subject + @course.course.to_s + 'successfully updated!' }\n        format.json { render :index, status: :ok, location: @user }\n      else\n        format.js {@errors = true}\n        format.html { render :edit }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n  \n  def destroy\n    Prerequisites.where(parent_course_id: @course.id).delete_all\n    Prerequisites.where(prerequisite_course_id: @course.id).delete_all\n    CourseSet.where(course_id: @course.id).delete_all\n    Offering.where(course_id: @course.id).delete_all\n    @course.destroy\n    respond_to do |format|\n      format.html { redirect_to courses_url, notice: @course.title + ' was successfully destroyed.'  }\n      format.json { head :no_content }\n    end\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_course\n      @course = Course.find(params[:id])\n    end\n\n    # Never trust parameters from the scary internet, only allow the white list through.\n    def course_params\n      params.require(:course).permit(:subject, :course, :title, :credits, :minimum_class_standing, :minimum_sat_score,{:prerequisites => []})\n    end\n    \n    def authorize\n      logged_in = User.find_by_id(session[:user_id])\n      if not (logged_in.advisor or logged_in.administrator)\n        redirect_to user_transcripts_path(logged_in), notice: \"You're not authorized to view this page!\"\n      end\n    end\nend\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":540,"scrollleft":0,"selection":{"start":{"row":85,"column":55},"end":{"row":85,"column":62},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":37,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1426786537763}